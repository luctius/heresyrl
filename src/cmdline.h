/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "heresyrl"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "heresyrl"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "development"
#endif

enum enum_race { race__NULL = -1, race_arg_dwarf = 0, race_arg_elf, race_arg_halfling, race_arg_human };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int playback_flag;	/**< @brief play a savegame from start until current turn (default=off).  */
  const char *playback_help; /**< @brief play a savegame from start until current turn help description.  */
  int pb_delay_arg;	/**< @brief delay when playing a savegame in miliseconds, default is 1 second (default='100').  */
  char * pb_delay_orig;	/**< @brief delay when playing a savegame in miliseconds, default is 1 second original value given at command line.  */
  const char *pb_delay_help; /**< @brief delay when playing a savegame in miliseconds, default is 1 second help description.  */
  int pb_stop_arg;	/**< @brief when playing a savegame, stop at after turn N (default='0').  */
  char * pb_stop_orig;	/**< @brief when playing a savegame, stop at after turn N original value given at command line.  */
  const char *pb_stop_help; /**< @brief when playing a savegame, stop at after turn N help description.  */
  char * log_file_arg;	/**< @brief log file name (default='/tmp/heresyrl.log').  */
  char * log_file_orig;	/**< @brief log file name original value given at command line.  */
  const char *log_file_help; /**< @brief log file name help description.  */
  char * save_file_arg;	/**< @brief save file name (default='/tmp/heresyrl.save').  */
  char * save_file_orig;	/**< @brief save file name original value given at command line.  */
  const char *save_file_help; /**< @brief save file name help description.  */
  char * name_arg;	/**< @brief name of character (default='').  */
  char * name_orig;	/**< @brief name of character original value given at command line.  */
  const char *name_help; /**< @brief name of character help description.  */
  enum enum_race race_arg;	/**< @brief race of character.  */
  char * race_orig;	/**< @brief race of character original value given at command line.  */
  const char *race_help; /**< @brief race of character help description.  */
  int debug_flag;	/**< @brief show debug output (default=off).  */
  const char *debug_help; /**< @brief show debug output help description.  */
  int map_flag;	/**< @brief show the complete map (default=off).  */
  const char *map_help; /**< @brief show the complete map help description.  */
  int test_auto_flag;	/**< @brief same as playback, but quite when done and show nothing (default=off).  */
  const char *test_auto_help; /**< @brief same as playback, but quite when done and show nothing help description.  */
  int no_load_flag;	/**< @brief do not load a previous made character (default=off).  */
  const char *no_load_help; /**< @brief do not load a previous made character help description.  */
  int no_save_flag;	/**< @brief do not save a made character (default=off).  */
  const char *no_save_help; /**< @brief do not save a made character help description.  */
  int print_map_only_flag;	/**< @brief only print the map and close (default=off).  */
  const char *print_map_only_help; /**< @brief only print the map and close help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int playback_given ;	/**< @brief Whether playback was given.  */
  unsigned int pb_delay_given ;	/**< @brief Whether pb_delay was given.  */
  unsigned int pb_stop_given ;	/**< @brief Whether pb_stop was given.  */
  unsigned int log_file_given ;	/**< @brief Whether log_file was given.  */
  unsigned int save_file_given ;	/**< @brief Whether save_file was given.  */
  unsigned int name_given ;	/**< @brief Whether name was given.  */
  unsigned int race_given ;	/**< @brief Whether race was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int map_given ;	/**< @brief Whether map was given.  */
  unsigned int test_auto_given ;	/**< @brief Whether test_auto was given.  */
  unsigned int no_load_given ;	/**< @brief Whether no_load was given.  */
  unsigned int no_save_given ;	/**< @brief Whether no_save was given.  */
  unsigned int print_map_only_given ;	/**< @brief Whether print_map_only was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_race_values[];  /**< @brief Possible values for race. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
